// Autogenerated by Frugal Compiler (2.15.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package gateway_test

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

func init() {
}

type EnumType int64

const (
	EnumType_ANOPTION EnumType = 0
	EnumType_BOPTION  EnumType = 1
)

func (p EnumType) String() string {
	switch p {
	case EnumType_ANOPTION:
		return "ANOPTION"
	case EnumType_BOPTION:
		return "BOPTION"
	}
	return "<UNSET>"
}

func EnumTypeFromString(s string) (EnumType, error) {
	switch s {
	case "ANOPTION":
		return EnumType_ANOPTION, nil
	case "BOPTION":
		return EnumType_BOPTION, nil
	}
	return EnumType(0), fmt.Errorf("not a valid EnumType string")
}

func (p EnumType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *EnumType) UnmarshalText(text []byte) error {
	q, err := EnumTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *EnumType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = EnumType(v)
	return nil
}

func (p *EnumType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BaseType struct {
	BoolTest   *bool    `thrift:"boolTest,1" db:"boolTest" json:"boolTest,omitempty"`
	ByteTest   *int8    `thrift:"byteTest,2" db:"byteTest" json:"byteTest,omitempty"`
	I16Test    *int16   `thrift:"i16Test,3" db:"i16Test" json:"i16Test,omitempty"`
	I32Test    *int32   `thrift:"i32Test,4" db:"i32Test" json:"i32Test,omitempty"`
	I64Test    *int64   `thrift:"i64Test,5" db:"i64Test" json:"i64Test,omitempty"`
	DoubleTest *float64 `thrift:"doubleTest,6" db:"doubleTest" json:"doubleTest,omitempty"`
	BinaryTest []byte   `thrift:"binaryTest,7" db:"binaryTest" json:"binaryTest,omitempty"`
	StringTest string   `thrift:"stringTest,8" db:"stringTest" json:"differentString"`
}

func NewBaseType() *BaseType {
	return &BaseType{}
}

var BaseType_BoolTest_DEFAULT bool

func (p *BaseType) IsSetBoolTest() bool {
	return p.BoolTest != nil
}

func (p *BaseType) GetBoolTest() bool {
	if !p.IsSetBoolTest() {
		return BaseType_BoolTest_DEFAULT
	}
	return *p.BoolTest
}

var BaseType_ByteTest_DEFAULT int8

func (p *BaseType) IsSetByteTest() bool {
	return p.ByteTest != nil
}

func (p *BaseType) GetByteTest() int8 {
	if !p.IsSetByteTest() {
		return BaseType_ByteTest_DEFAULT
	}
	return *p.ByteTest
}

var BaseType_I16Test_DEFAULT int16

func (p *BaseType) IsSetI16Test() bool {
	return p.I16Test != nil
}

func (p *BaseType) GetI16Test() int16 {
	if !p.IsSetI16Test() {
		return BaseType_I16Test_DEFAULT
	}
	return *p.I16Test
}

var BaseType_I32Test_DEFAULT int32

func (p *BaseType) IsSetI32Test() bool {
	return p.I32Test != nil
}

func (p *BaseType) GetI32Test() int32 {
	if !p.IsSetI32Test() {
		return BaseType_I32Test_DEFAULT
	}
	return *p.I32Test
}

var BaseType_I64Test_DEFAULT int64

func (p *BaseType) IsSetI64Test() bool {
	return p.I64Test != nil
}

func (p *BaseType) GetI64Test() int64 {
	if !p.IsSetI64Test() {
		return BaseType_I64Test_DEFAULT
	}
	return *p.I64Test
}

var BaseType_DoubleTest_DEFAULT float64

func (p *BaseType) IsSetDoubleTest() bool {
	return p.DoubleTest != nil
}

func (p *BaseType) GetDoubleTest() float64 {
	if !p.IsSetDoubleTest() {
		return BaseType_DoubleTest_DEFAULT
	}
	return *p.DoubleTest
}

var BaseType_BinaryTest_DEFAULT []byte

func (p *BaseType) IsSetBinaryTest() bool {
	return p.BinaryTest != nil
}

func (p *BaseType) GetBinaryTest() []byte {
	return p.BinaryTest
}

func (p *BaseType) GetStringTest() string {
	return p.StringTest
}

func (p *BaseType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseType) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BoolTest = &v
	}
	return nil
}

func (p *BaseType) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ByteTest = &v
	}
	return nil
}

func (p *BaseType) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.I16Test = &v
	}
	return nil
}

func (p *BaseType) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.I32Test = &v
	}
	return nil
}

func (p *BaseType) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.I64Test = &v
	}
	return nil
}

func (p *BaseType) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DoubleTest = &v
	}
	return nil
}

func (p *BaseType) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BinaryTest = v
	}
	return nil
}

func (p *BaseType) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.StringTest = v
	}
	return nil
}

func (p *BaseType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BaseType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseType) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetBoolTest() {
		if err := oprot.WriteFieldBegin("boolTest", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolTest: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BoolTest)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.boolTest (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolTest: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetByteTest() {
		if err := oprot.WriteFieldBegin("byteTest", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteTest: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ByteTest)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.byteTest (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteTest: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField3(oprot thrift.TProtocol) error {
	if p.IsSetI16Test() {
		if err := oprot.WriteFieldBegin("i16Test", thrift.I16, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Test: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.I16Test)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.i16Test (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Test: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField4(oprot thrift.TProtocol) error {
	if p.IsSetI32Test() {
		if err := oprot.WriteFieldBegin("i32Test", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Test: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.I32Test)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.i32Test (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Test: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField5(oprot thrift.TProtocol) error {
	if p.IsSetI64Test() {
		if err := oprot.WriteFieldBegin("i64Test", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Test: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.I64Test)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.i64Test (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Test: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField6(oprot thrift.TProtocol) error {
	if p.IsSetDoubleTest() {
		if err := oprot.WriteFieldBegin("doubleTest", thrift.DOUBLE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:doubleTest: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DoubleTest)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.doubleTest (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:doubleTest: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField7(oprot thrift.TProtocol) error {
	if p.IsSetBinaryTest() {
		if err := oprot.WriteFieldBegin("binaryTest", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:binaryTest: ", p), err)
		}
		if err := oprot.WriteBinary([]byte(p.BinaryTest)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.binaryTest (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:binaryTest: ", p), err)
		}
	}
	return nil
}

func (p *BaseType) writeField8(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("stringTest", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringTest: ", p), err)
	}
	if err := oprot.WriteString(string(p.StringTest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stringTest (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringTest: ", p), err)
	}
	return nil
}

func (p *BaseType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseType(%+v)", *p)
}

type ContainerType struct {
	ListTest []*BaseType          `thrift:"listTest,1" db:"listTest" json:"listTest,omitempty"`
	SetTest  map[*BaseType]bool   `thrift:"setTest,2" db:"setTest" json:"setTest,omitempty"`
	MapTest  map[string]*BaseType `thrift:"mapTest,3" db:"mapTest" json:"mapTest,omitempty"`
	EnumTest *EnumType            `thrift:"enumTest,4" db:"enumTest" json:"enumTest,omitempty"`
}

func NewContainerType() *ContainerType {
	return &ContainerType{}
}

var ContainerType_ListTest_DEFAULT []*BaseType

func (p *ContainerType) IsSetListTest() bool {
	return p.ListTest != nil
}

func (p *ContainerType) GetListTest() []*BaseType {
	return p.ListTest
}

var ContainerType_SetTest_DEFAULT map[*BaseType]bool

func (p *ContainerType) IsSetSetTest() bool {
	return p.SetTest != nil
}

func (p *ContainerType) GetSetTest() map[*BaseType]bool {
	return p.SetTest
}

var ContainerType_MapTest_DEFAULT map[string]*BaseType

func (p *ContainerType) IsSetMapTest() bool {
	return p.MapTest != nil
}

func (p *ContainerType) GetMapTest() map[string]*BaseType {
	return p.MapTest
}

var ContainerType_EnumTest_DEFAULT EnumType

func (p *ContainerType) IsSetEnumTest() bool {
	return p.EnumTest != nil
}

func (p *ContainerType) GetEnumTest() EnumType {
	if !p.IsSetEnumTest() {
		return ContainerType_EnumTest_DEFAULT
	}
	return *p.EnumTest
}

func (p *ContainerType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContainerType) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.ListTest = make([]*BaseType, 0, size)
	for i := 0; i < size; i++ {
		elem0 := NewBaseType()
		if err := elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem0), err)
		}
		p.ListTest = append(p.ListTest, elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ContainerType) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	p.SetTest = make(map[*BaseType]bool, size)
	for i := 0; i < size; i++ {
		elem1 := NewBaseType()
		if err := elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem1), err)
		}
		(p.SetTest)[elem1] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ContainerType) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.MapTest = make(map[string]*BaseType, size)
	for i := 0; i < size; i++ {
		var elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			elem2 = v
		}
		elem3 := NewBaseType()
		if err := elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", elem3), err)
		}
		(p.MapTest)[elem2] = elem3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ContainerType) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := EnumType(v)
		p.EnumTest = &temp
	}
	return nil
}

func (p *ContainerType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContainerType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContainerType) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetListTest() {
		if err := oprot.WriteFieldBegin("listTest", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listTest: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListTest)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListTest {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listTest: ", p), err)
		}
	}
	return nil
}

func (p *ContainerType) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetSetTest() {
		if err := oprot.WriteFieldBegin("setTest", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setTest: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.SetTest)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.SetTest {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setTest: ", p), err)
		}
	}
	return nil
}

func (p *ContainerType) writeField3(oprot thrift.TProtocol) error {
	if p.IsSetMapTest() {
		if err := oprot.WriteFieldBegin("mapTest", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mapTest: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MapTest)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapTest {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mapTest: ", p), err)
		}
	}
	return nil
}

func (p *ContainerType) writeField4(oprot thrift.TProtocol) error {
	if p.IsSetEnumTest() {
		if err := oprot.WriteFieldBegin("enumTest", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enumTest: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EnumTest)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enumTest (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enumTest: ", p), err)
		}
	}
	return nil
}

func (p *ContainerType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContainerType(%+v)", *p)
}
